<doc>
  <members>
    <member name="T:std.vector`2">
      <summary>Container that or stores elements of a specified type in a linear arrangement, and allows fast random access to any element.</summary>
      <typeparam name="_Ty">The element data type to be stored in the vector.</typeparam>
      <typeparam name="_Alloc">The type that represents the stored allocator object that encapsulates details about the vector's allocation and deallocation of memory. Defaults to std::allocator for the specified template type.</typeparam>
    </member>
    <member name="M:std.vector`2.#ctor(reference.const._Alloc) noexcept">
      <summary>Creates an empty vector.</summary>
      <param name="_Al">The allocator used to manage the vector's memory.</param>
    </member>
    <member name="M:std.vector`2.#ctor(reference.const._Alloc) noexcept constexpr">
      <summary>Creates an empty vector.</summary>
      <param name="_Al">The allocator used to manage the vector's memory.</param>
    </member>
    <member name="M:std.vector`2.#ctor(reference.const.std.vector{_Ty,_Alloc})">
      <summary>Creates a vector with the contents of another vector copied into it.</summary>
      <param name="_Right">A vector whose contents will be copied into the new vector instance.</param>
    </member>
    <member name="M:std.vector`2.#ctor(reference.const.std.vector{_Ty,_Alloc}) constexpr">
      <summary>Creates a vector with the contents of another vector copied into it.</summary>
      <param name="_Right">A vector whose contents will be copied into the new vector instance.</param>
    </member>
    <member name="M:std.vector`2.#ctor(rvalue.std.vector{_Ty,_Alloc}) noexcept">
      <summary>Creates a vector with the contents of another vector moved into it.</summary>
      <param name="_Right">A vector whose contents will be moved into the new vector instance.</param>
    </member>
    <member name="M:std.vector`2.#ctor(rvalue.std.vector{_Ty,_Alloc}) noexcept constexpr">
      <summary>Creates a vector with the contents of another vector moved into it.</summary>
      <param name="_Right">A vector whose contents will be moved into the new vector instance.</param>
    </member>
    <member name="M:std.vector`2.#ctor(std.vector{_Ty,_Alloc}.size_type,reference.const._Alloc)">
      <summary>Creates a vector with a specified number of items initialized to their default value.</summary>
      <param name="_Count">The number of elements in the constructed vector.</param>
      <param name="_Al">The allocator used to manage the vector's memory.</param>
    </member>
    <member name="M:std.vector`2.#ctor(std.vector{_Ty,_Alloc}.size_type,reference.const._Alloc) constexpr">
      <summary>Creates a vector with a specified number of items initialized to their default value.</summary>
      <param name="_Count">The number of elements in the constructed vector.</param>
      <param name="_Al">The allocator used to manage the vector's memory.</param>
    </member>
    <member name="M:std.vector`2.#ctor(std.initializer_list{_Ty},reference.const._Alloc)">
      <summary>Creates a vector with the contents of the initializer list copied into it.</summary>
      <param name="_Ilist">The list of elements to copy into the new vector instance.</param>
      <param name="_Al">The allocator used to manage the vector's memory.</param>
    </member>
    <member name="M:std.vector`2.#ctor(std.initializer_list{_Ty},reference.const._Alloc) constexpr">
      <summary>Creates a vector with the contents of the initializer list copied into it.</summary>
      <param name="_Ilist">The list of elements to copy into the new vector instance.</param>
      <param name="_Al">The allocator used to manage the vector's memory.</param>
    </member>
    <member name="M:std.vector`2.#ctor(reference.const.std.vector{_Ty,_Alloc},reference.const.std._Identity_t{_Alloc})">
      <summary>Creates a vector with the contents of another vector copied into it.</summary>
      <param name="_Right">A vector whose contents will be copied into the new vector instance.</param>
      <param name="_Al">The allocator used to manage the vector's memory.</param>
    </member>
    <member name="M:std.vector`2.#ctor(reference.const.std.vector{_Ty,_Alloc},reference.const.std._Identity_t{_Alloc}) constexpr">
      <summary>Creates a vector with the contents of another vector copied into it.</summary>
      <param name="_Right">A vector whose contents will be copied into the new vector instance.</param>
      <param name="_Al">The allocator used to manage the vector's memory.</param>
    </member>
    <member name="M:std.vector`2.#ctor(rvalue.std.vector{_Ty,_Alloc},reference.const.std._Identity_t{_Alloc})">
      <summary>Creates a vector with the contents of another vector moved into it.</summary>
      <param name="_Right">A vector whose contents will be moved into the new vector instance.</param>
      <param name="_Al_">The allocator used to manage the vector's memory.</param>
    </member>
    <member name="M:std.vector`2.#ctor(rvalue.std.vector{_Ty,_Alloc},reference.const.std._Identity_t{_Alloc}) constexpr">
      <summary>Creates a vector with the contents of another vector moved into it.</summary>
      <param name="_Right">A vector whose contents will be moved into the new vector instance.</param>
      <param name="_Al_">The allocator used to manage the vector's memory.</param>
    </member>
    <member name="M:std.vector`2.#ctor``2(std.vector{_Ty,_Alloc}.size_type,reference.const._Ty,reference.const._Alloc)">
      <summary>Creates a vector with a specified number of items initialized to a specified value.</summary>
      <param name="_Count">The number of elements in the constructed vector.</param>
      <param name="_Val">The element to fill the vector with.</param>
      <param name="_Al">The allocator used to manage the vector's memory.</param>
    </member>
    <member name="M:std.vector`2.#ctor``2(std.vector{_Ty,_Alloc}.size_type,reference.const._Ty,reference.const._Alloc) constexpr">
      <summary>Creates a vector with a specified number of items initialized to a specified value.</summary>
      <param name="_Count">The number of elements in the constructed vector.</param>
      <param name="_Val">The element to fill the vector with.</param>
      <param name="_Al">The allocator used to manage the vector's memory.</param>
    </member>
    <member name="M:std.vector`2.#ctor(std.vector{_Ty,_Alloc}.size_type,reference.const._Ty,reference.const._Alloc)">
      <summary>Creates a vector with a specified number of items initialized to a specified value.</summary>
      <param name="_Count">The number of elements in the constructed vector.</param>
      <param name="_Val">The element to fill the vector with.</param>
      <param name="_Al">The allocator used to manage the vector's memory.</param>
    </member>
    <member name="M:std.vector`2.#ctor``2(_Iter,_Iter,reference.const._Alloc)">
      <summary>Creates a vector with a copy of the elements from the range described by element iterators.</summary>
      <typeparam name="_Iter">Input iterator.</typeparam>
      <param name="_First">The location of the first element in the range to be copied.</param>
      <param name="_Last">The location where the copy should stop. This element is not included in the copy.</param>
      <param name="_Al">The allocator used to manage the vector's memory.</param>
    </member>
    <member name="M:std.vector`2.#ctor``2(_Iter,_Iter,reference.const._Alloc) constexpr">
      <summary>Creates a vector with a copy of the elements from the range described by element iterators.</summary>
      <typeparam name="_Iter">Input iterator.</typeparam>
      <param name="_First">The location of the first element in the range to be copied.</param>
      <param name="_Last">The location where the copy should stop. This element is not included in the copy.</param>
      <param name="_Al">The allocator used to manage the vector's memory.</param>
    </member>
    <member name="M:std.vector`2.#ctor``1(std.from_range_t,rvalue._Rng,reference.const._Alloc) constexpr">
      <summary>Creates a new vector with the contents of a range copied into it.</summary>
      <typeparam name="_Rng">Container range.</typeparam>
      <param name="_Range">A range whose contents will be copied into the new vector instance.</param>
      <param name="_Al">The allocator used to manage the vector's memory.</param>
    </member>
    <member name="M:std.vector`2.#ctor">
      <summary>Creates an empty vector.</summary>
    </member>
    <member name="M:std.vector`2.#ctor constexpr">
      <summary>Creates an empty vector.</summary>
    </member>
    <member name="M:std.vector`2.~vector noexcept">
      <summary>Deallocates storage for the vector.</summary>
    </member>
    <member name="M:std.vector`2.~vector noexcept constexpr">
      <summary>Deallocates storage for the vector.</summary>
    </member>
    <member name="M:std.vector`2.append_range``1(rvalue._Rng) constexpr">
      <summary>Appends a range of elements to the end of the vector.</summary>
      <typeparam name="_Rng">Container range.</typeparam>
      <param name="_Range">The range to append.</param>
    </member>
    <member name="M:std.vector`2.assign(std.initializer_list{_Ty})">
      <summary>Replaces contents of the vector with a copy of the elements from an initializer list.</summary>
      <param name="_Ilist">The list of elements that will replace the current contents of the vector.</param>
    </member>
    <member name="M:std.vector`2.assign(std.initializer_list{_Ty}) constexpr">
      <summary>Replaces contents of the vector with a copy of the elements from an initializer list.</summary>
      <param name="_Ilist">The list of elements that will replace the current contents of the vector.</param>
    </member>
    <member name="M:std.vector`2.assign``2(_Iter,_Iter)">
      <summary>Replaces contents of the vector with a copy of the elements from a range.</summary>
      <typeparam name="_Iter">Input iterator.</typeparam>
      <param name="_First">An iterator to the first element in the range to copy from.</param>
      <param name="_Last">An iterator that refers to the first element beyond the end of the range.</param>
    </member>
    <member name="M:std.vector`2.assign``2(_Iter,_Iter) constexpr">
      <summary>Replaces contents of the vector with a copy of the elements from a range.</summary>
      <typeparam name="_Iter">Input iterator.</typeparam>
      <param name="_First">An iterator to the first element in the range to copy from.</param>
      <param name="_Last">An iterator that refers to the first element beyond the end of the range.</param>
    </member>
    <member name="M:std.vector`2.assign(std.vector{_Ty,_Alloc}.size_type,reference.const._Ty)">
      <summary>Replaces the contents of the vector with a specified number of elements, all initialized to a specified value.</summary>
      <param name="_Newsize">The new size of the vector.</param>
      <param name="_Val">The new value of all the elements in the vector.</param>
    </member>
    <member name="M:std.vector`2.assign(std.vector{_Ty,_Alloc}.size_type,reference.const._Ty) constexpr">
      <summary>Replaces the contents of the vector with a specified number of elements, all initialized to a specified value.</summary>
      <param name="_Newsize">The new size of the vector.</param>
      <param name="_Val">The new value of all the elements in the vector.</param>
    </member>
    <member name="M:std.vector`2.assign_range``1(rvalue._Rng) constexpr">
      <summary>Replaces the contents of the vector with elements from a range.</summary>
      <typeparam name="_Rng">Container range.</typeparam>
      <param name="_Range">The range to move.</param>
    </member>
    <member name="M:std.vector`2.at(std.vector{_Ty,_Alloc}.size_type)">
      <summary>Gets a reference to the element at the specified position.</summary>
      <param name="_Pos">The index of the element to retrieve.</param>
      <returns>Reference to the element at the specified position.</returns>
    </member>
    <member name="M:std.vector`2.at(std.vector{_Ty,_Alloc}.size_type) constexpr">
      <summary>Gets a reference to the element at the specified position.</summary>
      <param name="_Pos">The index of the element to retrieve.</param>
      <returns>Reference to the element at the specified position.</returns>
    </member>
    <member name="M:std.vector`2.at(std.vector{_Ty,_Alloc}.size_type) const">
      <summary>Gets a reference to the element at the specified position.</summary>
      <param name="_Pos">The index of the element to retrieve.</param>
      <returns>Reference to the element at the specified position.</returns>
    </member>
    <member name="M:std.vector`2.at(std.vector{_Ty,_Alloc}.size_type) const constexpr">
      <summary>Gets the element at the specified position.</summary>
      <param name="_Pos">The index of the element to retrieve.</param>
      <returns>Element at the specified position.</returns>
    </member>
    <member name="M:std.vector`2.back noexcept">
      <summary>Gets a reference to the last element in the vector.</summary>
      <returns>Reference to the last element in the vector.</returns>
    </member>
    <member name="M:std.vector`2.back noexcept constexpr">
      <summary>Gets a reference to the last element in the vector.</summary>
      <returns>Reference to the last element in the vector.</returns>
    </member>
    <member name="M:std.vector`2.back const noexcept">
      <summary>Gets a const reference to the last element in the vector.</summary>
      <returns>Const reference to the last element in the vector.</returns>
    </member>
    <member name="M:std.vector`2.back const noexcept constexpr">
      <summary>Gets a const reference to the last element in the vector.</summary>
      <returns>Const reference to the last element in the vector.</returns>
    </member>
    <member name="M:std.vector`2.begin noexcept">
      <summary>Gets an iterator at the first element in the vector.</summary>
      <returns>Iterator at the first element in the vector.</returns>
    </member>
    <member name="M:std.vector`2.begin noexcept constexpr">
      <summary>Gets an iterator at the first element in the vector.</summary>
      <returns>Iterator at the first element in the vector.</returns>
    </member>
    <member name="M:std.vector`2.begin const noexcept">
      <summary>Gets a const iterator at the first element in the vector.</summary>
      <returns>Const iterator at the first element in the vector.</returns>
    </member>
    <member name="M:std.vector`2.begin const noexcept constexpr">
      <summary>Gets a const iterator at the first element in the vector.</summary>
      <returns>Const iterator at the first element in the vector.</returns>
    </member>
    <member name="M:std.vector`2.capacity const noexcept">
      <summary>Gets the maximum number of elements that the vector can currently hold.</summary>
      <returns>Maximum number of elements that the vector can currently hold.</returns>
    </member>
    <member name="M:std.vector`2.capacity const noexcept constexpr">
      <summary>Gets the maximum number of elements that the vector can currently hold.</summary>
      <returns>Maximum number of elements that the vector can currently hold.</returns>
    </member>
    <member name="M:std.vector`2.cbegin const noexcept">
      <summary>Gets a const iterator at the beginning of the vector.</summary>
      <returns>Const iterator at the beginning of the vector.</returns>
    </member>
    <member name="M:std.vector`2.cbegin const noexcept constexpr">
      <summary>Gets a const iterator at the beginning of the vector.</summary>
      <returns>Const iterator at the beginning of the vector.</returns>
    </member>
    <member name="M:std.vector`2.cend const noexcept">
      <summary>Gets a const iterator at the end of the vector.</summary>
      <returns>Const iterator at the end of the vector.</returns>
    </member>
    <member name="M:std.vector`2.cend const noexcept constexpr">
      <summary>Gets a const iterator at the end of the vector.</summary>
      <returns>Const iterator at the end of the vector.</returns>
    </member>
    <member name="M:std.vector`2.clear noexcept">
      <summary>Erases the contents of the vector and invalidates iterators referring to its previous contents.</summary>
    </member>
    <member name="M:std.vector`2.clear noexcept constexpr">
      <summary>Erases the contents of the vector and invalidates iterators referring to its previous contents.</summary>
    </member>
    <member name="M:std.vector`2.crbegin const noexcept">
      <summary>Gets a const reverse iterator at the beginning of the vector.</summary>
      <returns>Const reverse iterator at the beginning of the vector.</returns>
    </member>
    <member name="M:std.vector`2.crbegin const noexcept constexpr">
      <summary>Gets a const reverse iterator at the beginning of the vector.</summary>
      <returns>Const reverse iterator at the beginning of the vector.</returns>
    </member>
    <member name="M:std.vector`2.crend const noexcept">
      <summary>Gets a const reverse iterator at the end of the vector.</summary>
      <returns>Const reverse iterator at the end of the vector.</returns>
    </member>
    <member name="M:std.vector`2.crend const noexcept constexpr">
      <summary>Gets a const reverse iterator at the end of the vector.</summary>
      <returns>Const reverse iterator at the end of the vector.</returns>
    </member>
    <member name="M:std.vector`2.data noexcept">
      <summary>Returns a pointer to the first element in the vector.</summary>
      <returns>A pointer to the first element in the vector or to the location succeeding an empty vector.</returns>
    </member>
    <member name="M:std.vector`2.data noexcept constexpr">
      <summary>Returns a pointer to the first element in the vector.</summary>
      <returns>A pointer to the first element in the vector or to the location succeeding an empty vector.</returns>
    </member>
    <member name="M:std.vector`2.data const noexcept">
      <summary>Gets a pointer to the first element in the vector.</summary>
      <returns>Pointer to the first element in the vector.</returns>
    </member>
    <member name="M:std.vector`2.data const noexcept constexpr">
      <summary>Gets a pointer to the first element in the vector.</summary>
      <returns>Pointer to the first element in the vector.</returns>
    </member>
    <member name="M:std.vector`2.emplace``1(std.vector{_Ty,_Alloc}.const_iterator,rvalue._Valty...)">
      <summary>Constructs a new element and adds it to the vector at the specified position.</summary>
      <param name="_Where">A const iterator to the position to create the new element at.</param>
      <param name="_Val">The parameters to be forwarded to the constructor of the element.</param>
      <returns>An iterator at the created element.</returns>
    </member>
    <member name="M:std.vector`2.emplace``1(std.vector{_Ty,_Alloc}.const_iterator,rvalue._Valty...) constexpr">
      <summary>Constructs a new element and adds it to the vector at the specified position.</summary>
      <param name="_Where">A const iterator to the position to create the new element at.</param>
      <param name="_Val">The parameters to be forwarded to the constructor of the element.</param>
      <returns>An iterator at the created element.</returns>
    </member>
    <member name="M:std.vector`2.emplace_back``1(rvalue._Valty...)">
      <summary>Constructs a new element and adds it to the end of the vector.</summary>
      <param name="_Val">The parameters to be forwarded to the constructor of the element.</param>
      <returns>A reference to the inserted element.</returns>
    </member>
    <member name="M:std.vector`2.emplace_back``1(rvalue._Valty...) constexpr">
      <summary>Constructs a new element and adds it to the end of the vector.</summary>
      <param name="_Val">The parameters to be forwarded to the constructor of the element.</param>
      <returns>A reference to the inserted element.</returns>
    </member>
    <member name="M:std.vector`2.empty const noexcept">
      <summary>Gets a value indicating whether the vector is empty.</summary>
      <returns>True if the vector contains no elements, false if it has at least one element.</returns>
    </member>
    <member name="M:std.vector`2.empty const noexcept constexpr">
      <summary>Gets a value indicating whether the vector is empty.</summary>
      <returns>True if the vector contains no elements, false if it has at least one element.</returns>
    </member>
    <member name="M:std.vector`2.end noexcept">
      <summary>Gets an iterator at the location after the last element in the vector.</summary>
      <returns>Iterator at the location after the last element in the vector.</returns>
    </member>
    <member name="M:std.vector`2.end noexcept constexpr">
      <summary>Gets an iterator at the location after the last element in the vector.</summary>
      <returns>Iterator at the location after the last element in the vector.</returns>
    </member>
    <member name="M:std.vector`2.end const noexcept">
      <summary>Gets a const iterator at the location after the last element in the vector.</summary>
      <returns>Const iterator at the location after the last element in the vector.</returns>
    </member>
    <member name="M:std.vector`2.end const noexcept constexpr">
      <summary>Gets a const iterator at the location after the last element in the vector.</summary>
      <returns>Const iterator at the location after the last element in the vector.</returns>
    </member>
    <member name="M:std.vector`2.erase(std.vector{_Ty,_Alloc}.const_iterator)">
      <summary>Removes elements starting at the specified iterator.</summary>
      <param name="_Where">A const iterator at the first element in the range to be erased.</param>
      <returns>An iterator at the first element after the erased elements.</returns>
    </member>
    <member name="M:std.vector`2.erase(std.vector{_Ty,_Alloc}.const_iterator) constexpr">
      <summary>Removes elements starting at the specified iterator.</summary>
      <param name="_Where">A const iterator at the first element in the range to be erased.</param>
      <returns>An iterator at the first element after the erased elements.</returns>
    </member>
    <member name="M:std.vector`2.erase(std.vector{_Ty,_Alloc}.const_iterator,std.vector{_Ty,_Alloc}.const_iterator)">
      <summary>Removes elements within the specified range.</summary>
      <param name="_First">A const iterator at the first element in the range to be erased.</param>
      <param name="_Last">A const iterator at the last element in the range to be erased.</param>
      <returns>An iterator at the first element after the erased elements.</returns>
    </member>
    <member name="M:std.vector`2.erase(std.vector{_Ty,_Alloc}.const_iterator,std.vector{_Ty,_Alloc}.const_iterator) constexpr">
      <summary>Removes elements within the specified range.</summary>
      <param name="_First">A const iterator at the first element in the range to be erased.</param>
      <param name="_Last">A const iterator at the last element in the range to be erased.</param>
      <returns>An iterator at the first element after the erased elements.</returns>
    </member>
    <member name="M:std.vector`2.front noexcept">
      <summary>Gets a reference to the first element in the vector.</summary>
      <returns>Reference to the first element in the vector.</returns>
    </member>
    <member name="M:std.vector`2.front noexcept constexpr">
      <summary>Gets a reference to the first element in the vector.</summary>
      <returns>Reference to the first element in the vector.</returns>
    </member>
    <member name="M:std.vector`2.front const noexcept">
      <summary>Gets a const reference to the first element in the vector.</summary>
      <returns>Const reference to the first element in the vector.</returns>
    </member>
    <member name="M:std.vector`2.front const noexcept constexpr">
      <summary>Gets a const reference to the first element in the vector.</summary>
      <returns>Const reference to the first element in the vector.</returns>
    </member>
    <member name="M:std.vector`2.get_allocator const noexcept">
      <summary>Gets a copy of the allocator object used to construct the vector.</summary>
      <returns>Copy of the allocator used by the vector.</returns>
    </member>
    <member name="M:std.vector`2.get_allocator const noexcept constexpr">
      <summary>Gets a copy of the allocator object used to construct the vector.</summary>
      <returns>Copy of the allocator used by the vector.</returns>
    </member>
    <member name="M:std.vector`2.insert(std.vector{_Ty,_Alloc}.const_iterator,std.initializer_list{_Ty})">
      <summary>Inserts a list of elements into the vector at the specified position.</summary>
      <param name="_Where">A const iterator to the position to insert at.</param>
      <param name="_Ilist">The list of elements to insert.</param>
      <returns>An iterator at the first inserted element.</returns>
    </member>
    <member name="M:std.vector`2.insert(std.vector{_Ty,_Alloc}.const_iterator,std.initializer_list{_Ty}) constexpr">
      <summary>Inserts a list of elements into the vector at the specified position.</summary>
      <param name="_Where">A const iterator to the position to insert at.</param>
      <param name="_Ilist">The list of elements to insert.</param>
      <returns>An iterator at the first inserted element.</returns>
    </member>
    <member name="M:std.vector`2.insert(std.vector{_Ty,_Alloc}.const_iterator,rvalue._Ty)">
      <summary>Inserts an element into the vector at the specified position.</summary>
      <param name="_Where">A const iterator to the position to insert at.</param>
      <param name="_Val">The element to insert.</param>
      <returns>An iterator at the inserted element.</returns>
    </member>
    <member name="M:std.vector`2.insert(std.vector{_Ty,_Alloc}.const_iterator,rvalue._Ty) constexpr">
      <summary>Inserts an element into the vector at the specified position.</summary>
      <param name="_Where">A const iterator to the position to insert at.</param>
      <param name="_Val">The element to insert.</param>
      <returns>An iterator at the inserted element.</returns>
    </member>
    <member name="M:std.vector`2.insert(std.vector{_Ty,_Alloc}.const_iterator,reference.const._Ty)">
      <summary>Inserts an element into the vector at the specified position.</summary>
      <param name="_Where">A const iterator to the position to insert at.</param>
      <param name="_Val">The element to insert.</param>
      <returns>An iterator at the inserted element.</returns>
    </member>
    <member name="M:std.vector`2.insert(std.vector{_Ty,_Alloc}.const_iterator,reference.const._Ty) constexpr">
      <summary>Inserts an element into the vector at the specified position.</summary>
      <param name="_Where">A const iterator to the position to insert at.</param>
      <param name="_Val">The element to insert.</param>
      <returns>An iterator at the inserted element.</returns>
    </member>
    <member name="M:std.vector`2.insert(std.vector{_Ty,_Alloc}.const_iterator,std.vector{_Ty,_Alloc}.size_type,reference.const._Ty)">
      <summary>Inserts an element one or more times into the vector at the specified position.</summary>
      <param name="_Where">A const iterator to the position to insert at.</param>
      <param name="_Count">The number of times the element will be inserted.</param>
      <param name="_Val">The element to insert.</param>
      <returns>An iterator at the first inserted element.</returns>
    </member>
    <member name="M:std.vector`2.insert(std.vector{_Ty,_Alloc}.const_iterator,std.vector{_Ty,_Alloc}.size_type,reference.const._Ty) constexpr">
      <summary>Inserts an element one or more times into the vector at the specified position.</summary>
      <param name="_Where">A const iterator to the position to insert at.</param>
      <param name="_Count">The number of times the element will be inserted.</param>
      <param name="_Val">The element to insert.</param>
      <returns>An iterator at the first inserted element.</returns>
    </member>
    <member name="M:std.vector`2.insert``2(std.vector{_Ty,_Alloc}.const_iterator,_Iter,_Iter)">
      <summary>Inserts a range of elements into the vector at the specified position.</summary>
      <typeparam name="_Iter">Input iterator.</typeparam>
      <param name="_Where">A const iterator to the position to insert at.</param>
      <param name="_First">The position of the first element in the range of elements to be copied.</param>
      <param name="_Last">The position of the first element beyond the range of elements to be copied.</param>
      <returns>An iterator at the first inserted element.</returns>
    </member>
    <member name="M:std.vector`2.insert``2(std.vector{_Ty,_Alloc}.const_iterator,_Iter,_Iter) constexpr">
      <summary>Inserts a range of elements into the vector at the specified position.</summary>
      <typeparam name="_Iter">Input iterator.</typeparam>
      <param name="_Where">A const iterator to the position to insert at.</param>
      <param name="_First">The position of the first element in the range of elements to be copied.</param>
      <param name="_Last">The position of the first element beyond the range of elements to be copied.</param>
      <returns>An iterator at the first inserted element.</returns>
    </member>
    <member name="M:std.vector`2.insert_range``1(std.vector{_Ty,_Alloc}.const_iterator,rvalue._Rng) constexpr">
      <summary>Inserts a range of elements into the vector at the specified position.</summary>
      <typeparam name="_Rng">Container range.</typeparam>
      <param name="_Where">A const iterator to the position to insert at.</param>
      <param name="_Range">The range of the insertion.</param>
      <returns>An iterator at the first inserted element.</returns>
    </member>
    <member name="M:std.vector`2.max_size const noexcept">
      <summary>Gets the maximum number of elements the vector could contain.</summary>
      <returns>Maximum number of elements the vector could contain.</returns>
    </member>
    <member name="M:std.vector`2.max_size const noexcept constexpr">
      <summary>Gets the maximum number of elements the vector could contain.</summary>
      <returns>Maximum number of elements the vector could contain.</returns>
    </member>
    <member name="M:std.vector`2.operator[](std.vector{_Ty,_Alloc}.size_type) noexcept">
      <summary>Provides a reference to the element at the specified index in the vector.</summary>
      <param name="_Pos">The index of the position of the element to be referenced.</param>
      <returns>A reference to the element of the vector at the position specified by the parameter index.</returns>
    </member>
    <member name="M:std.vector`2.operator[](std.vector{_Ty,_Alloc}.size_type) noexcept constexpr">
      <summary>Provides a reference to the element at the specified index in the vector.</summary>
      <param name="_Pos">The index of the position of the element to be referenced.</param>
      <returns>A reference to the element of the vector at the position specified by the parameter index.</returns>
    </member>
    <member name="M:std.vector`2.operator[](std.vector{_Ty,_Alloc}.size_type) const noexcept">
      <summary>Provides a reference to the element at the specified index in the vector.</summary>
      <param name="_Pos">The index of the position of the element to be referenced.</param>
      <returns>A reference to the element of the vector at the position specified by the parameter index.</returns>
    </member>
    <member name="M:std.vector`2.operator[](std.vector{_Ty,_Alloc}.size_type) const noexcept constexpr">
      <summary>Provides a reference to the element at the specified index in the vector.</summary>
      <param name="_Pos">The index of the position of the element to be referenced.</param>
      <returns>A reference to the element of the vector at the position specified by the parameter index.</returns>
    </member>
    <member name="M:std.vector`2.operator=(std.initializer_list{_Ty})">
      <summary>Assigns a new value to the vector.</summary>
      <param name="_Ilist">The initializer list being copied into the vector.</param>
      <returns>A reference to the resulting vector object.</returns>
    </member>
    <member name="M:std.vector`2.operator=(std.initializer_list{_Ty}) constexpr">
      <summary>Assigns a new value to the vector.</summary>
      <param name="_Ilist">The initializer list being copied into the vector.</param>
      <returns>A reference to the resulting vector object.</returns>
    </member>
    <member name="M:std.vector`2.operator=(reference.const.std.vector{_Ty,_Alloc})">
      <summary>Assigns a new value to the vector.</summary>
      <param name="_Right">The vector being copied into the vector.</param>
      <returns>A reference to the resulting vector object.</returns>
    </member>
    <member name="M:std.vector`2.operator=(reference.const.std.vector{_Ty,_Alloc}) constexpr">
      <summary>Assigns a new value to the vector.</summary>
      <param name="_Right">The vector being copied into the vector.</param>
      <returns>A reference to the resulting vector object.</returns>
    </member>
    <member name="M:std.vector`2.operator=(rvalue.std.vector{_Ty,_Alloc})">
      <summary>Assigns a new value to the vector.</summary>
      <param name="_Right">The vector being copied into the vector.</param>
      <returns>A reference to the resulting vector object.</returns>
    </member>
    <member name="M:std.vector`2.operator=(rvalue.std.vector{_Ty,_Alloc}) constexpr">
      <summary>Assigns a new value to the vector.</summary>
      <param name="_Right">The vector being copied into the vector.</param>
      <returns>A reference to the resulting vector object.</returns>
    </member>
    <member name="M:std.vector`2.pop_back noexcept">
      <summary>Deletes the element at the end of the vector.</summary>
    </member>
    <member name="M:std.vector`2.pop_back noexcept constexpr">
      <summary>Deletes the element at the end of the vector.</summary>
    </member>
    <member name="M:std.vector`2.push_back(rvalue._Ty)">
      <summary>Adds a copy of an element to the end of the vector.</summary>
      <param name="_Val">The value to insert.</param>
    </member>
    <member name="M:std.vector`2.push_back(rvalue._Ty) constexpr">
      <summary>Adds a copy of an element to the end of the vector.</summary>
      <param name="_Val">The value to insert.</param>
    </member>
    <member name="M:std.vector`2.push_back(reference.const._Ty)">
      <summary>Adds a copy of an element to the end of the vector.</summary>
      <param name="_Val">The value to insert.</param>
    </member>
    <member name="M:std.vector`2.push_back(reference.const._Ty) constexpr">
      <summary>Adds a copy of an element to the end of the vector.</summary>
      <param name="_Val">The value to insert.</param>
    </member>
    <member name="M:std.vector`2.rbegin noexcept">
      <summary>Gets a reverse iterator at the begining of the vector.</summary>
      <returns>Reverse iterator at the begining of the vector.</returns>
    </member>
    <member name="M:std.vector`2.rbegin noexcept constexpr">
      <summary>Gets a reverse iterator at the begining of the vector.</summary>
      <returns>Reverse iterator at the begining of the vector.</returns>
    </member>
    <member name="M:std.vector`2.rbegin const noexcept">
      <summary>Gets a reverse iterator at the begining of the vector.</summary>
      <returns>A const reverse iterator at the begining of the vector.</returns>
    </member>
    <member name="M:std.vector`2.rbegin const noexcept constexpr">
      <summary>Gets a reverse iterator at the begining of the vector.</summary>
      <returns>A const reverse iterator at the begining of the vector.</returns>
    </member>
    <member name="M:std.vector`2.rend noexcept">
      <summary>Gets a reverse iterator at the end of the vector.</summary>
      <returns>Reverse iterator at the end of the vector.</returns>
    </member>
    <member name="M:std.vector`2.rend noexcept constexpr">
      <summary>Gets a reverse iterator at the end of the vector.</summary>
      <returns>Reverse iterator at the end of the vector.</returns>
    </member>
    <member name="M:std.vector`2.rend const noexcept">
      <summary>Gets a reverse iterator at the end of the vector.</summary>
      <returns>A const reverse iterator at the end of the vector.</returns>
    </member>
    <member name="M:std.vector`2.rend const noexcept constexpr">
      <summary>Gets a reverse iterator at the end of the vector.</summary>
      <returns>A const reverse iterator at the end of the vector.</returns>
    </member>
    <member name="M:std.vector`2.reserve(std.vector{_Ty,_Alloc}.size_type)">
      <summary>Increases the capacity of the vector if the current capacity is smaller than the requested value.</summary>
      <param name="_Newcapacity">The new capacity for the vector.</param>
    </member>
    <member name="M:std.vector`2.reserve(std.vector{_Ty,_Alloc}.size_type) constexpr">
      <summary>Increases the capacity of the vector if the current capacity is smaller than the requested value.</summary>
      <param name="_Newcapacity">The new capacity for the vector.</param>
    </member>
    <member name="M:std.vector`2.resize(std.vector{_Ty,_Alloc}.size_type)">
      <summary>Specifies a new size for a vector, appending or erasing elements as required.</summary>
      <param name="_Newsize">The new size of the vector.</param>
    </member>
    <member name="M:std.vector`2.resize(std.vector{_Ty,_Alloc}.size_type) constexpr">
      <summary>Specifies a new size for a vector, appending or erasing elements as required.</summary>
      <param name="_Newsize">The new size of the vector.</param>
    </member>
    <member name="M:std.vector`2.resize(std.vector{_Ty,_Alloc}.size_type,reference.const._Ty)">
      <summary>Specifies a new size for a vector, appending or erasing elements as required.</summary>
      <param name="_Newsize">The new size of the vector.</param>
      <param name="_Val">The optional value to use for additional elements if more elements are required.</param>
    </member>
    <member name="M:std.vector`2.resize(std.vector{_Ty,_Alloc}.size_type,reference.const._Ty) constexpr">
      <summary>Specifies a new size for a vector, appending or erasing elements as required.</summary>
      <param name="_Newsize">The new size of the vector.</param>
      <param name="_Val">The optional value to use for additional elements if more elements are required.</param>
    </member>
    <member name="M:std.vector`2.shrink_to_fit">
      <summary>Discards excess capacity.</summary>
    </member>
    <member name="M:std.vector`2.shrink_to_fit constexpr">
      <summary>Discards excess capacity.</summary>
    </member>
    <member name="M:std.vector`2.size const noexcept">
      <summary>Gets the number of elements in the vector.</summary>
      <returns>Number of elements in the vector.</returns>
    </member>
    <member name="M:std.vector`2.size const noexcept constexpr">
      <summary>Gets the number of elements in the vector.</summary>
      <returns>Number of elements in the vector.</returns>
    </member>
    <member name="M:std.vector`2.swap(reference.std.vector{_Ty,_Alloc}) noexcept">
      <summary>Exchanges the elements of two vectors.</summary>
      <param name="_Right">A vector whose elements are to be exchanged.</param>
    </member>
    <member name="M:std.vector`2.swap(reference.std.vector{_Ty,_Alloc}) noexcept constexpr">
      <summary>Exchanges the elements of two vectors.</summary>
      <param name="_Right">A vector whose elements are to be exchanged.</param>
    </member>
    <member name="std.vector`2.allocator_type">
      <summary>A type that represents the allocator class for the vector object.</summary>
    </member>
    <member name="std.vector`2.const_iterator">
      <summary>A type that provides a random-access iterator that can read a const element in a vector.</summary>
    </member>
    <member name="std.vector`2.const_pointer">
      <summary>A type that provides a pointer to a const element in a vector.</summary>
    </member>
    <member name="std.vector`2.const_reference">
      <summary>A type that provides a reference to a const element stored in a vector.</summary>
    </member>
    <member name="std.vector`2.const_reverse_iterator">
      <summary>A type that provides a random-access iterator that can read any const element in the vector.</summary>
    </member>
    <member name="std.vector`2.difference_type">
      <summary>A type that provides the difference between two iterators that refer to elements within the same vector.</summary>
    </member>
    <member name="std.vector`2.iterator">
      <summary>A type that provides a random-access iterator that can read or modify any element in a vector.</summary>
    </member>
    <member name="std.vector`2.pointer">
      <summary>A type that provides a pointer to an element in a vector.</summary>
    </member>
    <member name="std.vector`2.reference">
      <summary>A type that provides a reference to an element stored in a vector.</summary>
    </member>
    <member name="std.vector`2.reverse_iterator">
      <summary>A type that provides a random-access iterator that can read or modify any element in a reversed vector.</summary>
    </member>
    <member name="std.vector`2.size_type">
      <summary>A type that counts the number of elements in a vector.</summary>
    </member>
    <member name="std.vector`2.value_type">
      <summary>A type that represents the data type stored in a vector.</summary>
    </member>
  </members>
<Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo><CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /><SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-sha256" /><Reference URI=""><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" /><Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /></Transforms><DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256" /><DigestValue>OEcp9GMPiRqMuc2ooxT44tVQkMJziNNhKBjNrfJ6ym8=</DigestValue></Reference></SignedInfo><SignatureValue>EOEcgGuNqXQ3VMR3TcJPYgjrWeqe+qemump3M+5qpWeVLq4Vfu7GazgAR4jOFHTLzmFAzHsRdbBHGS86ufdxk9Th6bbJEXBNbq5YxC/G+ex4edglpflCk5Ebikc+I3x27hU6r09clV6NksEr+knDckPtT1kk9aCVfbvG2ADuaSLaePuVDfplPMKL1fQzJEHZNEyoqFX1u2a3/GO7OjSqv6tZvE2/aO4x1w8uGEoTna7z2uWSO41DQja8u0EYDwugVsyuTDCkTAnh3G6xVxXYWPIbo6u1NVwpXlvzkki0Zq1gugWsrW1Xp6mj4e/zY1LJilwRBqzSf9VUkJDM/iN9/w==</SignatureValue><KeyInfo><KeyValue><RSAKeyValue><Modulus>9CD8pjY3wxCoPmMhOkow7ycCltfqYnqk4wGNApzh2dTY+YqxozWTzJUOB38VxsgFQmXBFhOMdrGYGpvO9kdbNPkwHpTrW6hZqFuLLiRwGKEx4ZM5zVSqbHJuX2fPfUJ0Xmb+VrVsGw/BwBV2zz0rVtiSgqj3GeeGOsG7llfWyrSjyJqm5DHE3o04BAI/NuhkHOv04euiqJGvHFCL8+fXvyD9OAxq4fcJKtoyBb0PBA3oMNQeCsiUyLO+voZqVTOUsAWY0bN5YjkK4nq5DVaNdVrrowd5AX9gmz6D/TJTssns6pDCG00Y+Dh3ipWpnVmkhYcByyUSEKX3PLC8DkiAQQ==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue></KeyValue><X509Data><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate></X509Data></KeyInfo><Object Id="ts-countersig"><X509Data><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate></X509Data><CounterSignature ts-format="cms-timestamp-message" xmlns="http://schemas.microsoft.com/xmldsig/timestamp/2003"></CounterSignature></Object></Signature></doc>